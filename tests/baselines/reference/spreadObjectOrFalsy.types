=== tests/cases/conformance/types/spread/spreadObjectOrFalsy.ts ===
function f1<T>(a: T & undefined) {
>f1 : <T>(a: T & undefined) => any
>a : T & undefined

    return { ...a };  // Error
>{ ...a } : any
>a : T & undefined
}

function f2<T>(a: T | T & undefined) {
>f2 : <T>(a: T | (T & undefined)) => T | (T & undefined)
>a : T | (T & undefined)

    return { ...a };
>{ ...a } : T | (T & undefined)
>a : T | (T & undefined)
}

function f3<T extends undefined>(a: T) {
>f3 : <T extends undefined>(a: T) => any
>a : T

    return { ...a };  // Error
>{ ...a } : any
>a : T
}

function f4<T extends undefined>(a: object | T) {
>f4 : <T extends undefined>(a: object | T) => {}
>a : object | T

    return { ...a };
>{ ...a } : {}
>a : object | T
}

function f5<S, T extends undefined>(a: S | T) {
>f5 : <S, T extends undefined>(a: S | T) => S | T
>a : S | T

    return { ...a };
>{ ...a } : S | T
>a : S | T
}

function f6<T extends object | undefined>(a: T) {
>f6 : <T extends object | undefined>(a: T) => T
>a : T

    return { ...a };
>{ ...a } : T
>a : T
}

// Repro from #46976

function g1<T extends {}, A extends { z: (T | undefined) & T }>(a: A) {
>g1 : <T extends {}, A extends { z: (T | undefined) & T; }>(a: A) => (T | undefined) & T
>z : (T | undefined) & T
>a : A

    const { z } = a;
>z : (T | undefined) & T
>a : A

    return {
>{        ...z    } : (T | undefined) & T

        ...z
>z : (T | undefined) & T

    };
}

