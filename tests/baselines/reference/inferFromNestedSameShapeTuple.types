=== tests/cases/compiler/inferFromNestedSameShapeTuple.ts ===
// repro #48524

type Magic<X> = X extends [[infer Y, ...infer _], ...infer __] ? Y : never;
>Magic : Magic<X>

type R = Magic<[[number]]>
>R : number

// repro #52722

type Recursive<Id> = {
>Recursive : Recursive<Id>

    id: Id
>id : Id

    children: readonly Recursive<Id>[]
>children : readonly Recursive<Id>[]
}

declare function getIds<Id>(items: readonly Recursive<Id>[]): Id[];
>getIds : <Id>(items: readonly Recursive<Id>[]) => Id[]
>items : readonly Recursive<Id>[]

const items = [{
>items : readonly [{ readonly id: "a"; readonly children: readonly [{ readonly id: "b"; readonly children: readonly []; }]; }]
>[{    id: 'a',    children: [{        id: 'b',        children: []    }]}] as const satisfies readonly Recursive<string>[] : readonly [{ readonly id: "a"; readonly children: readonly [{ readonly id: "b"; readonly children: readonly []; }]; }]
>[{    id: 'a',    children: [{        id: 'b',        children: []    }]}] as const : readonly [{ readonly id: "a"; readonly children: readonly [{ readonly id: "b"; readonly children: readonly []; }]; }]
>[{    id: 'a',    children: [{        id: 'b',        children: []    }]}] : readonly [{ readonly id: "a"; readonly children: readonly [{ readonly id: "b"; readonly children: readonly []; }]; }]
>{    id: 'a',    children: [{        id: 'b',        children: []    }]} : { readonly id: "a"; readonly children: readonly [{ readonly id: "b"; readonly children: readonly []; }]; }

    id: 'a',
>id : "a"
>'a' : "a"

    children: [{
>children : readonly [{ readonly id: "b"; readonly children: readonly []; }]
>[{        id: 'b',        children: []    }] : readonly [{ readonly id: "b"; readonly children: readonly []; }]
>{        id: 'b',        children: []    } : { readonly id: "b"; readonly children: readonly []; }

        id: 'b',
>id : "b"
>'b' : "b"

        children: []
>children : readonly []
>[] : readonly []

    }]
}] as const satisfies readonly Recursive<string>[]

const foo = getIds(items)
>foo : ("a" | "b")[]
>getIds(items) : ("a" | "b")[]
>getIds : <Id>(items: readonly Recursive<Id>[]) => Id[]
>items : readonly [{ readonly id: "a"; readonly children: readonly [{ readonly id: "b"; readonly children: readonly []; }]; }]

// variant with a fresh argument
const foo2 = getIds([{
>foo2 : ("a" | "b")[]
>getIds([{    id: 'a',    children: [{        id: 'b',        children: []    }]}] as const) : ("a" | "b")[]
>getIds : <Id>(items: readonly Recursive<Id>[]) => Id[]
>[{    id: 'a',    children: [{        id: 'b',        children: []    }]}] as const : readonly [{ readonly id: "a"; readonly children: readonly [{ readonly id: "b"; readonly children: readonly []; }]; }]
>[{    id: 'a',    children: [{        id: 'b',        children: []    }]}] : readonly [{ readonly id: "a"; readonly children: readonly [{ readonly id: "b"; readonly children: readonly []; }]; }]
>{    id: 'a',    children: [{        id: 'b',        children: []    }]} : { readonly id: "a"; readonly children: readonly [{ readonly id: "b"; readonly children: readonly []; }]; }

    id: 'a',
>id : "a"
>'a' : "a"

    children: [{
>children : readonly [{ readonly id: "b"; readonly children: readonly []; }]
>[{        id: 'b',        children: []    }] : readonly [{ readonly id: "b"; readonly children: readonly []; }]
>{        id: 'b',        children: []    } : { readonly id: "b"; readonly children: readonly []; }

        id: 'b',
>id : "b"
>'b' : "b"

        children: []
>children : readonly []
>[] : readonly []

    }]
}] as const)
